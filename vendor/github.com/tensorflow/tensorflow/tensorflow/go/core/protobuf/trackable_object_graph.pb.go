// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/core/protobuf/trackable_object_graph.proto

package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TrackableObjectGraph struct {
	Nodes []*TrackableObjectGraph_TrackableObject `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *TrackableObjectGraph) Reset()                    { *m = TrackableObjectGraph{} }
func (m *TrackableObjectGraph) String() string            { return proto.CompactTextString(m) }
func (*TrackableObjectGraph) ProtoMessage()               {}
func (*TrackableObjectGraph) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *TrackableObjectGraph) GetNodes() []*TrackableObjectGraph_TrackableObject {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type TrackableObjectGraph_TrackableObject struct {
	// Objects which this object depends on.
	Children []*TrackableObjectGraph_TrackableObject_ObjectReference `protobuf:"bytes,1,rep,name=children" json:"children,omitempty"`
	// Serialized data specific to this object.
	Attributes []*TrackableObjectGraph_TrackableObject_SerializedTensor `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty"`
	// Slot variables owned by this object.
	SlotVariables []*TrackableObjectGraph_TrackableObject_SlotVariableReference `protobuf:"bytes,3,rep,name=slot_variables,json=slotVariables" json:"slot_variables,omitempty"`
}

func (m *TrackableObjectGraph_TrackableObject) Reset()         { *m = TrackableObjectGraph_TrackableObject{} }
func (m *TrackableObjectGraph_TrackableObject) String() string { return proto.CompactTextString(m) }
func (*TrackableObjectGraph_TrackableObject) ProtoMessage()    {}
func (*TrackableObjectGraph_TrackableObject) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{0, 0}
}

func (m *TrackableObjectGraph_TrackableObject) GetChildren() []*TrackableObjectGraph_TrackableObject_ObjectReference {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *TrackableObjectGraph_TrackableObject) GetAttributes() []*TrackableObjectGraph_TrackableObject_SerializedTensor {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *TrackableObjectGraph_TrackableObject) GetSlotVariables() []*TrackableObjectGraph_TrackableObject_SlotVariableReference {
	if m != nil {
		return m.SlotVariables
	}
	return nil
}

type TrackableObjectGraph_TrackableObject_ObjectReference struct {
	// An index into `TrackableObjectGraph.nodes`, indicating the object
	// being referenced.
	NodeId int32 `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	// A user-provided name for the edge.
	LocalName string `protobuf:"bytes,2,opt,name=local_name,json=localName" json:"local_name,omitempty"`
}

func (m *TrackableObjectGraph_TrackableObject_ObjectReference) Reset() {
	*m = TrackableObjectGraph_TrackableObject_ObjectReference{}
}
func (m *TrackableObjectGraph_TrackableObject_ObjectReference) String() string {
	return proto.CompactTextString(m)
}
func (*TrackableObjectGraph_TrackableObject_ObjectReference) ProtoMessage() {}
func (*TrackableObjectGraph_TrackableObject_ObjectReference) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{0, 0, 0}
}

func (m *TrackableObjectGraph_TrackableObject_ObjectReference) GetNodeId() int32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *TrackableObjectGraph_TrackableObject_ObjectReference) GetLocalName() string {
	if m != nil {
		return m.LocalName
	}
	return ""
}

type TrackableObjectGraph_TrackableObject_SerializedTensor struct {
	// A name for the Tensor. Simple variables have only one
	// `SerializedTensor` named "VARIABLE_VALUE" by convention. This value may
	// be restored on object creation as an optimization.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The full name of the variable/tensor, if applicable. Used to allow
	// name-based loading of checkpoints which were saved using an
	// object-based API. Should match the checkpoint key which would have been
	// assigned by tf.train.Saver.
	FullName string `protobuf:"bytes,2,opt,name=full_name,json=fullName" json:"full_name,omitempty"`
	// The generated name of the Tensor in the checkpoint.
	CheckpointKey string `protobuf:"bytes,3,opt,name=checkpoint_key,json=checkpointKey" json:"checkpoint_key,omitempty"`
	// Whether checkpoints should be considered as matching even without this
	// value restored. Used for non-critical values which don't affect the
	// TensorFlow graph, such as layer configurations.
	OptionalRestore bool `protobuf:"varint,4,opt,name=optional_restore,json=optionalRestore" json:"optional_restore,omitempty"`
}

func (m *TrackableObjectGraph_TrackableObject_SerializedTensor) Reset() {
	*m = TrackableObjectGraph_TrackableObject_SerializedTensor{}
}
func (m *TrackableObjectGraph_TrackableObject_SerializedTensor) String() string {
	return proto.CompactTextString(m)
}
func (*TrackableObjectGraph_TrackableObject_SerializedTensor) ProtoMessage() {}
func (*TrackableObjectGraph_TrackableObject_SerializedTensor) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{0, 0, 1}
}

func (m *TrackableObjectGraph_TrackableObject_SerializedTensor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TrackableObjectGraph_TrackableObject_SerializedTensor) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *TrackableObjectGraph_TrackableObject_SerializedTensor) GetCheckpointKey() string {
	if m != nil {
		return m.CheckpointKey
	}
	return ""
}

func (m *TrackableObjectGraph_TrackableObject_SerializedTensor) GetOptionalRestore() bool {
	if m != nil {
		return m.OptionalRestore
	}
	return false
}

type TrackableObjectGraph_TrackableObject_SlotVariableReference struct {
	// An index into `TrackableObjectGraph.nodes`, indicating the
	// variable object this slot was created for.
	OriginalVariableNodeId int32 `protobuf:"varint,1,opt,name=original_variable_node_id,json=originalVariableNodeId" json:"original_variable_node_id,omitempty"`
	// The name of the slot (e.g. "m"/"v").
	SlotName string `protobuf:"bytes,2,opt,name=slot_name,json=slotName" json:"slot_name,omitempty"`
	// An index into `TrackableObjectGraph.nodes`, indicating the
	// `Object` with the value of the slot variable.
	SlotVariableNodeId int32 `protobuf:"varint,3,opt,name=slot_variable_node_id,json=slotVariableNodeId" json:"slot_variable_node_id,omitempty"`
}

func (m *TrackableObjectGraph_TrackableObject_SlotVariableReference) Reset() {
	*m = TrackableObjectGraph_TrackableObject_SlotVariableReference{}
}
func (m *TrackableObjectGraph_TrackableObject_SlotVariableReference) String() string {
	return proto.CompactTextString(m)
}
func (*TrackableObjectGraph_TrackableObject_SlotVariableReference) ProtoMessage() {}
func (*TrackableObjectGraph_TrackableObject_SlotVariableReference) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{0, 0, 2}
}

func (m *TrackableObjectGraph_TrackableObject_SlotVariableReference) GetOriginalVariableNodeId() int32 {
	if m != nil {
		return m.OriginalVariableNodeId
	}
	return 0
}

func (m *TrackableObjectGraph_TrackableObject_SlotVariableReference) GetSlotName() string {
	if m != nil {
		return m.SlotName
	}
	return ""
}

func (m *TrackableObjectGraph_TrackableObject_SlotVariableReference) GetSlotVariableNodeId() int32 {
	if m != nil {
		return m.SlotVariableNodeId
	}
	return 0
}

func init() {
	proto.RegisterType((*TrackableObjectGraph)(nil), "tensorflow.TrackableObjectGraph")
	proto.RegisterType((*TrackableObjectGraph_TrackableObject)(nil), "tensorflow.TrackableObjectGraph.TrackableObject")
	proto.RegisterType((*TrackableObjectGraph_TrackableObject_ObjectReference)(nil), "tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference")
	proto.RegisterType((*TrackableObjectGraph_TrackableObject_SerializedTensor)(nil), "tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor")
	proto.RegisterType((*TrackableObjectGraph_TrackableObject_SlotVariableReference)(nil), "tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference")
}

func init() {
	proto.RegisterFile("tensorflow/core/protobuf/trackable_object_graph.proto", fileDescriptor4)
}

var fileDescriptor4 = []byte{
	// 430 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x4f, 0x6b, 0x13, 0x41,
	0x18, 0xc6, 0x99, 0x6e, 0x13, 0x93, 0x57, 0xda, 0x94, 0xc1, 0xea, 0x9a, 0x22, 0x04, 0x41, 0x88,
	0x97, 0xc4, 0x3f, 0x78, 0xf0, 0xa6, 0x1e, 0x2a, 0x45, 0xa8, 0xb0, 0x16, 0x4f, 0xc2, 0x30, 0x3b,
	0xfb, 0x6e, 0x33, 0x66, 0xb2, 0xb3, 0xcc, 0x4c, 0x94, 0xfa, 0x3d, 0xfc, 0x02, 0x1e, 0xfd, 0x26,
	0x7e, 0x23, 0x8f, 0x65, 0x66, 0xb3, 0xdd, 0xcd, 0x92, 0x4b, 0x6e, 0xc9, 0x33, 0xcf, 0xf3, 0x7b,
	0x79, 0xde, 0x97, 0x85, 0x37, 0x0e, 0x0b, 0xab, 0x4d, 0xae, 0xf4, 0xcf, 0xb9, 0xd0, 0x06, 0xe7,
	0xa5, 0xd1, 0x4e, 0xa7, 0xeb, 0x7c, 0xee, 0x0c, 0x17, 0x4b, 0x9e, 0x2a, 0x64, 0x3a, 0xfd, 0x8e,
	0xc2, 0xb1, 0x6b, 0xc3, 0xcb, 0xc5, 0x2c, 0xbc, 0x53, 0x68, 0x62, 0x4f, 0xff, 0xf6, 0xe1, 0xc1,
	0x55, 0x6d, 0xfe, 0x1c, 0xbc, 0x1f, 0xbd, 0x95, 0x9e, 0x43, 0xaf, 0xd0, 0x19, 0xda, 0x98, 0x4c,
	0xa2, 0xe9, 0xfd, 0x57, 0x2f, 0x66, 0x4d, 0x68, 0xb6, 0x2b, 0xd0, 0x15, 0x93, 0x2a, 0x3e, 0xfe,
	0xd7, 0x83, 0x51, 0xe7, 0x89, 0x7e, 0x83, 0x81, 0x58, 0x48, 0x95, 0x19, 0x2c, 0x36, 0xf8, 0x77,
	0xfb, 0xe2, 0x67, 0x9b, 0x29, 0x98, 0xa3, 0xc1, 0x42, 0x60, 0x72, 0x47, 0xa4, 0x1c, 0x80, 0x3b,
	0x67, 0x64, 0xba, 0x76, 0x68, 0xe3, 0x83, 0xc0, 0x7f, 0xbf, 0x37, 0xff, 0x0b, 0x1a, 0xc9, 0x95,
	0xfc, 0x85, 0xd9, 0x55, 0x48, 0x26, 0x2d, 0x28, 0x5d, 0xc1, 0xb1, 0x55, 0xda, 0xb1, 0x1f, 0xdc,
	0x48, 0x9f, 0xb1, 0x71, 0x14, 0xc6, 0x9c, 0xef, 0x3f, 0x46, 0x69, 0xf7, 0x75, 0x43, 0x69, 0xca,
	0x1c, 0xd9, 0x96, 0x6c, 0xc7, 0x17, 0x30, 0xea, 0xd4, 0xa5, 0x8f, 0xe0, 0x9e, 0xdf, 0x2f, 0x93,
	0x59, 0x4c, 0x26, 0x64, 0xda, 0x4b, 0xfa, 0xfe, 0xef, 0x45, 0x46, 0x9f, 0x00, 0x28, 0x2d, 0xb8,
	0x62, 0x05, 0x5f, 0x61, 0x7c, 0x30, 0x21, 0xd3, 0x61, 0x32, 0x0c, 0xca, 0x25, 0x5f, 0xe1, 0xf8,
	0x37, 0x81, 0x93, 0x6e, 0x35, 0x4a, 0xe1, 0x30, 0xb8, 0x49, 0x70, 0x87, 0xdf, 0xf4, 0x0c, 0x86,
	0xf9, 0x5a, 0x6d, 0x61, 0x06, 0x5e, 0xf0, 0x14, 0xfa, 0x0c, 0x8e, 0xc5, 0x02, 0xc5, 0xb2, 0xd4,
	0xb2, 0x70, 0x6c, 0x89, 0x37, 0x71, 0x14, 0x1c, 0x47, 0x8d, 0xfa, 0x09, 0x6f, 0xe8, 0x73, 0x38,
	0xd1, 0xa5, 0x93, 0xba, 0xe0, 0x8a, 0x19, 0xb4, 0x4e, 0x1b, 0x8c, 0x0f, 0x27, 0x64, 0x3a, 0x48,
	0x46, 0xb5, 0x9e, 0x54, 0xf2, 0xf8, 0x0f, 0x81, 0xd3, 0x9d, 0xbb, 0xa0, 0x6f, 0xe1, 0xb1, 0x36,
	0xf2, 0x5a, 0x7a, 0x48, 0xbd, 0x6f, 0xb6, 0xdd, 0xfd, 0x61, 0x6d, 0xa8, 0xd3, 0x97, 0xd5, 0x2e,
	0xce, 0x60, 0x18, 0xce, 0xd4, 0xee, 0xe0, 0x85, 0xd0, 0xe1, 0x25, 0x9c, 0x6e, 0xdd, 0xf0, 0x8e,
	0x19, 0x05, 0x26, 0x6d, 0x9f, 0xa0, 0xe2, 0x7d, 0x88, 0xfe, 0x13, 0x92, 0xf6, 0xc3, 0x47, 0xf4,
	0xfa, 0x36, 0x00, 0x00, 0xff, 0xff, 0x38, 0x69, 0x1f, 0x59, 0x7d, 0x03, 0x00, 0x00,
}
